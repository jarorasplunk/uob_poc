{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_11_to_port_12",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_7_to_port_11",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_0_to_port_14",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_14_to_port_6",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_14_to_port_13",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_13_to_port_15",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_16",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_12_to_port_23",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_21_to_port_23",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_23_to_port_1",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_20_to_port_21",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_19_to_port_21",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_16_to_port_24",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_24_to_port_20",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_24_to_port_19",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_16_to_port_25",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                }
            ],
            "hash": "d7eeab1ababa2d5bef976e20ac546b94af36c118",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 360,
                    "y": -1.9184653865522705e-13
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "    \n    phantom.debug(identity_details_tasknote__identity_note_content)\n    phantom.debug(asset_by_ip_tasknote__asset_note_content)\n    \n    # Write your custom code here...\n\n",
                    "warnings": {},
                    "x": 320,
                    "y": 1560
                },
                "11": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "get_identity_details",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_identity_details",
                        "id": "11",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "command": "",
                            "display": "identity_id,bunit,category,email,endDate,first,identity,identity_tag,last,managedBy,nick,phone,prefix,priority,startDate,suffix,watchlist,work_city,work_country,work_lat,work_long",
                            "end_time": "now",
                            "query": {
                                "functionId": 1,
                                "parameters": [
                                    "dedup_users:custom_function_result.data.*.item"
                                ],
                                "template": "| makeresults\n| eval user_input=\"{0}\" \n| rex mode=sed field=user_input \"s/aus\\\\\\//g\" \n| rex mode=sed field=user_input \"s/ //g\" \n| makemv delim=\",\" user_input \n| mvexpand user_input \n| dedup user_input\n| where user_input!=\"None\" OR user_input!=\"unknown\"\n| rename user_input as identity \n| lookup identity_lookup_expanded identity\n| table _time\tbunit\tcategory\tcim_entity_zone\temail\tendDate\tfirst\tidentity\tidentity_tag\tlast\tmanagedBy\tnick\tphone\tprefix\tpriority\tstartDate\tsuffix\ttable_format\tvalue\twatchlist\twork_city\twork_country\twork_lat\twork_long\n"
                            },
                            "start_time": "-24h"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "action",
                    "warnings": {},
                    "x": 0,
                    "y": 1100
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "identity_details_tasknote",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "identity_details_tasknote",
                        "id": "12",
                        "inputParameters": [
                            "get_identity_details:action_result.data.*.identity_id",
                            "get_identity_details:action_result.data.*.identity",
                            "get_identity_details:action_result.data.*.email",
                            "get_identity_details:action_result.data.*.first",
                            "get_identity_details:action_result.data.*.last",
                            "get_identity_details:action_result.data.*.nick",
                            "get_identity_details:action_result.data.*.bunit",
                            "get_identity_details:action_result.data.*.priority",
                            "get_identity_details:action_result.data.*.category",
                            "get_identity_details:action_result.data.*.identity_tag",
                            "get_identity_details:action_result.data.*.managedBy",
                            "get_identity_details:action_result.data.*.phone",
                            "get_identity_details:action_result.data.*.startDate",
                            "get_identity_details:action_result.data.*.endDate",
                            "get_identity_details:action_result.data.*.prefix",
                            "get_identity_details:action_result.data.*.suffix",
                            "get_identity_details:action_result.data.*.watchlist",
                            "get_identity_details:action_result.data.*.work_city",
                            "get_identity_details:action_result.data.*.work_country",
                            "get_identity_details:action_result.data.*.work_lat",
                            "get_identity_details:action_result.data.*.work_long"
                        ],
                        "outputVariables": [
                            "identity_note_content"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    #phantom.debug(get_identity_details_result_data)\n    phantom.debug(get_identity_details_result_item_0)\n    phantom.debug(get_identity_details_result_item_1)\n    phantom.debug(type(get_identity_details_result_item_1))\n    phantom.debug(get_identity_details_result_item_2)\n    phantom.debug(get_identity_details_result_item_3)\n    phantom.debug(get_identity_details_result_item_4)\n    phantom.debug(get_identity_details_result_item_5)\n    phantom.debug(get_identity_details_result_item_6)\n    phantom.debug(get_identity_details_result_item_7)\n    phantom.debug(get_identity_details_result_item_8)\n    phantom.debug(get_identity_details_result_item_9)\n    phantom.debug(get_identity_details_result_item_10)\n    phantom.debug(get_identity_details_result_item_11)\n    phantom.debug(get_identity_details_result_item_12)\n    phantom.debug(get_identity_details_result_item_13)\n    phantom.debug(get_identity_details_result_item_14)\n    phantom.debug(get_identity_details_result_item_15)\n    phantom.debug(get_identity_details_result_item_16)\n    phantom.debug(get_identity_details_result_item_17)\n    phantom.debug(get_identity_details_result_item_18)\n    phantom.debug(get_identity_details_result_item_19)\n    phantom.debug(get_identity_details_result_item_20)\n    \n    note = (\n        \"\\n**Identity details**\\n\"\n        \"| identity_id | identity | email | first | last | nick | bunit | priority | category | identity_tag | managedBy | phone | startDate | endDate | prefix | suffix | watchlist | work_city | work_country | work_lat | work_long |\\n\"\n        \"| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\\n\"\n        )\n    if get_identity_details_result_data:\n        for i in range(len(get_identity_details_result_item_1)):\n            identity_id = get_identity_details_result_item_0[i]\n            identity = get_identity_details_result_item_1[i]\n            email = get_identity_details_result_item_2[i]\n            first = get_identity_details_result_item_3[i]\n            last = get_identity_details_result_item_4[i]\n            nick = get_identity_details_result_item_5[i]\n            bunit = get_identity_details_result_item_6[i]\n            priority = get_identity_details_result_item_7[i]\n            category = get_identity_details_result_item_8[i]\n            identity_tag = get_identity_details_result_item_9[i]\n            managedBy = get_identity_details_result_item_10[i]\n            phone = get_identity_details_result_item_11[i]\n            startDate = get_identity_details_result_item_12[i]\n            endDate = get_identity_details_result_item_13[i]\n            prefix = get_identity_details_result_item_14[i]\n            suffix = get_identity_details_result_item_15[i]\n            watchlist = get_identity_details_result_item_16[i]\n            work_city = get_identity_details_result_item_17[i]\n            work_country = get_identity_details_result_item_18[i]\n            work_lat = get_identity_details_result_item_19[i]\n            work_long = get_identity_details_result_item_20[i]\n            note += \"|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|\\n\".format(identity_id, identity, email, first, last, nick, bunit, priority, category, identity_tag, managedBy, phone, startDate, endDate, prefix, suffix, watchlist, work_city, work_country, work_lat, work_long)\n    else:\n        note += \"|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|\\n\".format(\"No identities found\", None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)\n        \n    identity_details_tasknote__identity_note_content = note\n\n    phantom.debug(\"identity task note\")\n    phantom.debug(identity_details_tasknote__identity_note_content)\n",
                    "warnings": {},
                    "x": -1.4210854715202004e-14,
                    "y": 1240
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "normalise asset list",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "normalise_asset_list",
                        "id": "13",
                        "inputParameters": [
                            "playbook_input:src",
                            "playbook_input:dest",
                            "playbook_input:src_ip",
                            "playbook_input:dest_hostname",
                            "playbook_input:computername"
                        ],
                        "outputVariables": [
                            "asset_ip_list",
                            "asset_hostname_list"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    normalise_asset_list__asset_ip_list = playbook_input_src_values + playbook_input_dest_values + playbook_input_src_ip_values\n    normalise_asset_list__asset_hostname_list = playbook_input_dest_hostname_values + playbook_input_computername_values\n    \n    remove_list = [\"unknown\", \"None\", \"\"]\n    normalise_asset_list__asset_ip_list = [x for x in normalise_asset_list__asset_ip_list if x not in remove_list]\n    normalise_asset_list__asset_ip_list = [x for x in normalise_asset_list__asset_ip_list if x is not None]\n    normalise_asset_list__asset_hostname_list = [x for x in normalise_asset_list__asset_hostname_list if x not in remove_list]\n    normalise_asset_list__asset_hostname_list = [x for x in normalise_asset_list__asset_hostname_list if x is not None]\n    \n        \n    phantom.debug(\"before dedup asset list ip\")\n    phantom.debug(normalise_asset_list__asset_ip_list)\n    \n    phantom.debug(\"before dedup asset list hostname\")\n    phantom.debug(normalise_asset_list__asset_hostname_list)\n    \n\n",
                    "warnings": {},
                    "x": 510,
                    "y": 328
                },
                "14": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:user",
                                        "value": "None"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:src_user",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "or"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "playbook_input:src",
                                        "value": "None"
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "playbook_input:dest",
                                        "value": "None"
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "playbook_input:src_ip",
                                        "value": "None"
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "playbook_input:dest_hostname",
                                        "value": "None"
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "playbook_input:computername",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 1,
                                "logic": "or"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_1",
                        "id": "14",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "filter",
                    "warnings": {},
                    "x": 400,
                    "y": 140
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "dedup_asset_ip",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "list_deduplicate",
                            "repoName": "community"
                        },
                        "functionId": 6,
                        "functionName": "dedup_asset_ip",
                        "id": "15",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "list_deduplicate": {
                                "description": "Remove non-unique items from a list.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A list of items to deduplicate",
                                        "inputType": "list",
                                        "label": "input_list",
                                        "name": "input_list",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "list_deduplicate",
                                "name": "list_deduplicate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "list_deduplicate": {
                                "input_list": [
                                    "normalise_asset_list:custom_function:asset_ip_list"
                                ]
                            }
                        }
                    },
                    "errors": {},
                    "id": "15",
                    "type": "utility",
                    "warnings": {},
                    "x": 510,
                    "y": 476
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "dedup_asset_hostname",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "list_deduplicate",
                            "repoName": "community"
                        },
                        "functionId": 7,
                        "functionName": "dedup_asset_hostname",
                        "id": "16",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "list_deduplicate": {
                                "description": "Remove non-unique items from a list.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A list of items to deduplicate",
                                        "inputType": "list",
                                        "label": "input_list",
                                        "name": "input_list",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "list_deduplicate",
                                "name": "list_deduplicate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "list_deduplicate": {
                                "input_list": [
                                    "normalise_asset_list:custom_function:asset_hostname_list"
                                ]
                            }
                        }
                    },
                    "errors": {},
                    "id": "16",
                    "type": "utility",
                    "warnings": {},
                    "x": 510,
                    "y": 624
                },
                "19": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "asset by ip",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "asset_by_ip",
                        "id": "19",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "command": "",
                            "display": "CrowdStrikeActive,DNSDomain,LastSeen_CStrike_epoch,LastSeen_Splunk_epoch,LastSeen_epoch,SplunkActive,asset,asset_id,category,city,dns,ip,is_expected,mac,nt_host,owner,pci_domain,priority,tag",
                            "end_time": "now",
                            "query": {
                                "functionId": 2,
                                "parameters": [
                                    "dedup_asset_ip:custom_function_result.data.*.item"
                                ],
                                "template": "| inputlookup append=T asset_lookup_by_str \n| inputlookup append=T asset_lookup_by_cidr \n| rename _key as asset_id,asset_tag as tag \n| search ip IN ({0})\n| table CrowdStrikeActive,DNSDomain,LastSeen_CStrike_epoch,LastSeen_Splunk_epoch,LastSeen_epoch,SplunkActive,asset,asset_id,category,city,dns,ip,is_expected,mac,nt_host,owner,pci_domain,priority,tag\n\n"
                            },
                            "start_time": "-24h"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "action",
                    "warnings": {},
                    "x": 680,
                    "y": 960
                },
                "20": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "asset by hostname",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "asset_by_hostname",
                        "id": "20",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "command": "",
                            "display": "CrowdStrikeActive,DNSDomain,LastSeen_CStrike_epoch,LastSeen_Splunk_epoch,LastSeen_epoch,SplunkActive,asset,asset_id,category,city,dns,ip,is_expected,mac,nt_host,owner,pci_domain,priority,tag",
                            "end_time": "now",
                            "query": {
                                "functionId": 3,
                                "parameters": [
                                    "dedup_asset_hostname:custom_function_result.data.*.item"
                                ],
                                "template": "| inputlookup append=T asset_lookup_by_str \n| inputlookup append=T asset_lookup_by_cidr \n| rename _key as asset_id,asset_tag as tag \n| search nt_host IN ({0})\n| table CrowdStrikeActive,DNSDomain,LastSeen_CStrike_epoch,LastSeen_Splunk_epoch,LastSeen_epoch,SplunkActive,asset,asset_id,category,city,dns,ip,is_expected,mac,nt_host,owner,pci_domain,priority,tag\n\n\n"
                            },
                            "start_time": "-24h"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "action",
                    "warnings": {},
                    "x": 340,
                    "y": 960
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "asset_by_ip_tasknote",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "asset_by_ip",
                                "asset_by_hostname"
                            ]
                        },
                        "functionId": 6,
                        "functionName": "asset_by_ip_tasknote",
                        "id": "21",
                        "inputParameters": [
                            "asset_by_ip:action_result.data.*.asset",
                            "asset_by_ip:action_result.data.*.asset_id",
                            "asset_by_ip:action_result.data.*.nt_host",
                            "asset_by_ip:action_result.data.*.ip",
                            "asset_by_ip:action_result.data.*.mac",
                            "asset_by_ip:action_result.data.*.category",
                            "asset_by_ip:action_result.data.*.priority",
                            "asset_by_ip:action_result.data.*.owner",
                            "asset_by_ip:action_result.data.*.city",
                            "asset_by_ip:action_result.data.*.DNSDomain",
                            "asset_by_ip:action_result.data.*.dns",
                            "asset_by_ip:action_result.data.*.tag",
                            "asset_by_ip:action_result.data.*.CrowdStrikeActive",
                            "asset_by_ip:action_result.data.*.LastSeen_CStrike_epoch",
                            "asset_by_ip:action_result.data.*.LastSeen_Splunk_epoch",
                            "asset_by_ip:action_result.data.*.LastSeen_epoch",
                            "asset_by_ip:action_result.data.*.SplunkActive",
                            "asset_by_ip:action_result.data.*.is_expected",
                            "asset_by_ip:action_result.data.*.pci_domain",
                            "asset_by_hostname:action_result.data.*.asset",
                            "asset_by_hostname:action_result.data.*.asset_id",
                            "asset_by_hostname:action_result.data.*.nt_host",
                            "asset_by_hostname:action_result.data.*.ip",
                            "asset_by_hostname:action_result.data.*.mac",
                            "asset_by_hostname:action_result.data.*.category",
                            "asset_by_hostname:action_result.data.*.priority",
                            "asset_by_hostname:action_result.data.*.owner",
                            "asset_by_hostname:action_result.data.*.city",
                            "asset_by_hostname:action_result.data.*.DNSDomain",
                            "asset_by_hostname:action_result.data.*.dns",
                            "asset_by_hostname:action_result.data.*.tag",
                            "asset_by_hostname:action_result.data.*.CrowdStrikeActive",
                            "asset_by_hostname:action_result.data.*.LastSeen_CStrike_epoch",
                            "asset_by_hostname:action_result.data.*.LastSeen_Splunk_epoch",
                            "asset_by_hostname:action_result.data.*.LastSeen_epoch",
                            "asset_by_hostname:action_result.data.*.SplunkActive",
                            "asset_by_hostname:action_result.data.*.is_expected",
                            "asset_by_hostname:action_result.data.*.pci_domain",
                            "asset_by_ip:action_result.status",
                            "asset_by_hostname:action_result.status"
                        ],
                        "outputVariables": [
                            "asset_note_content"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(\"asset_by_ip_result_data\")\n    phantom.debug(asset_by_ip_result_data)\n    \n    phantom.debug(\"asset_by_hostname_result_data\")\n    phantom.debug(asset_by_hostname_result_data)\n    \n    note = (\n        \"\\n**Asset details**\\n\"\n        \"| asset | asset_id | nt_host | ip | mac | category | priority | owner | city | DNSDomain | dns | tag | CrowdStrikeActive | LastSeen_CStrike_epoch | LastSeen_Splunk_epoch | LastSeen_epoch | SplunkActive | is_expected | pci_domain |\\n\"\n        \"| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\\n\"\n        )\n    note1 = \"\"\n    note2 = \"\"\n    for i in range(len(asset_by_ip_result_item_0)):\n        asset = asset_by_ip_result_item_0[i]\n        asset_id = asset_by_ip_result_item_1[i]\n        nt_host = asset_by_ip_result_item_2[i]\n        ip = asset_by_ip_result_item_3[i]\n        mac = asset_by_ip_result_item_4[i]\n        category = asset_by_ip_result_item_5[i]\n        priority = asset_by_ip_result_item_6[i]\n        owner = asset_by_ip_result_item_7[i]\n        city = asset_by_ip_result_item_8[i]\n        DNSDomain = asset_by_ip_result_item_9[i]\n        dns = asset_by_ip_result_item_10[i]\n        tag = asset_by_ip_result_item_11[i]\n        CrowdStrikeActive = asset_by_ip_result_item_12[i]\n        LastSeen_CStrike_epoch = asset_by_ip_result_item_13[i]\n        LastSeen_Splunk_epoch = asset_by_ip_result_item_14[i]\n        LastSeen_epoch = asset_by_ip_result_item_15[i]\n        SplunkActive = asset_by_ip_result_item_16[i]\n        is_expected = asset_by_ip_result_item_17[i]\n        pci_domain = asset_by_ip_result_item_18[i]\n        note1 += \"|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|\\n\".format(asset, asset_id, nt_host, ip, mac, category, priority, owner, city, DNSDomain, dns, tag, CrowdStrikeActive, LastSeen_CStrike_epoch, LastSeen_Splunk_epoch, LastSeen_epoch, SplunkActive, is_expected, pci_domain)\n    \n    asset_by_ip_tasknote__asset_note_content_1 = note1  \n    \n    for i in range(len(asset_by_hostname_result_item_0)):\n        asset = asset_by_hostname_result_item_0[i]\n        asset_id = asset_by_hostname_result_item_1[i]\n        nt_host = asset_by_hostname_result_item_2[i]\n        ip = asset_by_hostname_result_item_3[i]\n        mac = asset_by_hostname_result_item_4[i]\n        category = asset_by_hostname_result_item_5[i]\n        priority = asset_by_hostname_result_item_6[i]\n        owner = asset_by_hostname_result_item_7[i]\n        city = asset_by_hostname_result_item_8[i]\n        DNSDomain = asset_by_hostname_result_item_9[i]\n        dns = asset_by_hostname_result_item_10[i]\n        tag = asset_by_hostname_result_item_11[i]\n        CrowdStrikeActive = asset_by_hostname_result_item_12[i]\n        LastSeen_CStrike_epoch = asset_by_hostname_result_item_13[i]\n        LastSeen_Splunk_epoch = asset_by_hostname_result_item_14[i]\n        LastSeen_epoch = asset_by_hostname_result_item_15[i]\n        SplunkActive = asset_by_hostname_result_item_16[i]\n        is_expected = asset_by_hostname_result_item_17[i]\n        pci_domain = asset_by_hostname_result_item_18[i]\n        note2 += \"|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|{}|\\n\".format(asset, asset_id, nt_host, ip, mac, category, priority, owner, city, DNSDomain, dns, tag, CrowdStrikeActive, LastSeen_CStrike_epoch, LastSeen_Splunk_epoch, LastSeen_epoch, SplunkActive, is_expected, pci_domain)\n        \n    asset_by_ip_tasknote__asset_note_content_2 = note2\n    \n    phantom.debug(\"asset_by_ip_tasknote__asset_note_content_1\")\n    phantom.debug(asset_by_ip_tasknote__asset_note_content_1)\n    phantom.debug(\"asset_by_ip_tasknote__asset_note_content_2\")\n    phantom.debug(asset_by_ip_tasknote__asset_note_content_2)\n                \n    asset_by_ip_tasknote__asset_note_content = note + asset_by_ip_tasknote__asset_note_content_1 + asset_by_ip_tasknote__asset_note_content_2\n    \n    phantom.debug(\"asset_by_ip_tasknote__asset_note_content\")\n    phantom.debug(asset_by_ip_tasknote__asset_note_content)\n\n    phantom.debug(\"asset task note\")\n    phantom.debug(asset_by_ip_tasknote__asset_note_content)\n    \n    \n    phantom.debug(\"asset details\")\n    phantom.debug(asset_by_ip_result_item_0)\n\n",
                    "warnings": {},
                    "x": 520,
                    "y": 1280
                },
                "23": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "noop",
                            "repoName": "community"
                        },
                        "functionId": 9,
                        "functionName": "noop_9",
                        "id": "23",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "noop": {
                                "description": "Do nothing and return nothing. Use this if you want to do something in a custom function setup section or leave a placeholder block in a playbook. This does not sleep or wait and will return as soon as possible.",
                                "fields": [],
                                "label": "noop",
                                "name": "noop"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "noop": {}
                        }
                    },
                    "errors": {},
                    "id": "23",
                    "type": "utility",
                    "userCode": "\n    # Write your custom code here...\n    \n\n",
                    "warnings": {},
                    "x": 300,
                    "y": 1444.5
                },
                "24": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "dedup_asset_ip:custom_function_result.data.*.item",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "!=",
                                        "param": "dedup_asset_hostname:custom_function_result.data.*.item",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "24",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "decision",
                    "warnings": {},
                    "x": 600,
                    "y": 740
                },
                "25": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 7,
                        "functionName": "code_7",
                        "id": "25",
                        "inputParameters": [
                            "dedup_asset_ip:custom_function_result.data.*.item",
                            "dedup_asset_hostname:custom_function_result.data.*.item"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(\"after dedup ip list\")\n    phantom.debug(dedup_asset_ip_data)\n    phantom.debug(\"after dedup hostname list\")\n    phantom.debug(dedup_asset_hostname_data)\n\n",
                    "warnings": {},
                    "x": 960,
                    "y": 720
                },
                "6": {
                    "customCode": null,
                    "data": {
                        "advanced": {
                            "customName": "normalise user list",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "normalise_user_list",
                        "id": "6",
                        "inputParameters": [
                            "playbook_input:user",
                            "playbook_input:src_user"
                        ],
                        "outputVariables": [
                            "user_list"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "        \n    if playbook_input_user_values and playbook_input_src_user_values:\n        normalise_user_list__user_list = playbook_input_user_values + playbook_input_src_user_values\n    if not playbook_input_user_values and playbook_input_src_user_values:\n        normalise_user_list__user_list = playbook_input_src_user_values\n    if playbook_input_user_values and not playbook_input_src_user_values:\n        normalise_user_list__user_list = playbook_input_user_values\n    if not playbook_input_user_values and not playbook_input_src_user_values:\n        normalise_user_list__user_list = None\n    remove_list = [\"unknown\", \"None\", \"\"]\n    normalise_user_list__user_list = [x for x in normalise_user_list__user_list if x not in remove_list]\n    normalise_user_list__user_list = [i for i in normalise_user_list__user_list if i is not None]\n        \n    phantom.debug(\"before dedup user list\")\n    phantom.debug(normalise_user_list__user_list)\n    # Write your custom code here...\n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 780
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "dedup_users",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "list_deduplicate",
                            "repoName": "community"
                        },
                        "functionId": 4,
                        "functionName": "dedup_users",
                        "id": "7",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "list_deduplicate": {
                                "description": "Remove non-unique items from a list.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A list of items to deduplicate",
                                        "inputType": "list",
                                        "label": "input_list",
                                        "name": "input_list",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "list_deduplicate",
                                "name": "list_deduplicate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "list_deduplicate": {
                                "input_list": [
                                    "normalise_user_list:custom_function:user_list"
                                ]
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "type": "utility",
                    "userCode": "    \n    # Write your custom code here...\n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 940
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [
                    "user name"
                ],
                "description": "",
                "name": "user"
            },
            {
                "contains": [
                    "user name"
                ],
                "description": "",
                "name": "src_user"
            },
            {
                "contains": [
                    "ip"
                ],
                "description": "",
                "name": "src"
            },
            {
                "contains": [
                    "ip"
                ],
                "description": "",
                "name": "dest"
            },
            {
                "contains": [
                    "ip"
                ],
                "description": "",
                "name": "src_ip"
            },
            {
                "contains": [
                    "host name"
                ],
                "description": "",
                "name": "dest_hostname"
            },
            {
                "contains": [
                    "host name"
                ],
                "description": "",
                "name": "computername"
            }
        ],
        "output_spec": [
            {
                "contains": [],
                "datapaths": [
                    "identity_details_tasknote:custom_function:identity_note_content"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "task_note_identity"
            },
            {
                "contains": [],
                "datapaths": [
                    "asset_by_ip_tasknote:custom_function:asset_note_content"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "task_note_assets"
            }
        ],
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.1.305"
    },
    "create_time": "2024-04-24T00:20:47.129123+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}