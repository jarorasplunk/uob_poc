{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Dynamic Analysis",
    "coa": {
        "data": {
            "description": "Accepts a URL or vault_id and does detonation analysis on the objects. Generates a global report and a per observable sub-report and normalized score. The score can be customized based on a variety of factors.\n\n",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_12",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_17_to_port_18",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_19_to_port_1",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_12_to_port_4",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_23_to_port_25",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_27_to_port_18",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_15",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_25_to_port_17",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_25_to_port_27",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "id": "port_15_to_port_29",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "id": "port_29_to_port_30",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "id": "port_30_to_port_23",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_18_to_port_31",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "id": "port_31_to_port_19",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                }
            ],
            "globalCustomCode": null,
            "hash": "2f155137eb5e64e97340944108b34de26df969ff",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 200,
                    "y": -80.00000000000011
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # Write your custom code here...\n    #phantom.debug(output)\n",
                    "warnings": {
                        "config": [
                            "Reconfigure invalid datapath."
                        ]
                    },
                    "x": 200,
                    "y": 2120
                },
                "12": {
                    "data": {
                        "action": "detonate file",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "file detonation",
                            "customNameId": 0,
                            "delayTime": 0,
                            "description": "Queries SAA for information about the provided vault_id(s)",
                            "join": [],
                            "note": "Queries SAA for information about the provided vault_id(s)"
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "saa_uob_poc"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "file_detonation",
                        "id": "12",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "file": "filtered-data:saa_input_filter:condition_1:playbook_input:vault_id",
                            "user_agent": "Default"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "file"
                            },
                            {
                                "data_type": "string",
                                "default": "Default",
                                "field": "user_agent"
                            }
                        ],
                        "tab": "byConnector",
                        "type": "action"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "action",
                    "warnings": {},
                    "x": 180,
                    "y": 200
                },
                "15": {
                    "data": {
                        "action": "get job summary",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "get file summary output",
                            "customNameId": 0,
                            "delayTime": 0,
                            "description": "Queries SAA Forensics data relative to the JobID of URL(s) or File(s) needs to be detonated.",
                            "join": [],
                            "note": "Queries SAA Forensics data relative to the JobID of URL(s) or File(s) needs to be detonated."
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "saa_uob_poc"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "get_file_summary_output",
                        "id": "15",
                        "loop": {
                            "conditions": [
                                {
                                    "comparisons": [
                                        {
                                            "conditionIndex": 0,
                                            "op": "==",
                                            "param": "get_file_summary_output:action_result.data.*.State",
                                            "value": "done"
                                        }
                                    ],
                                    "conditionIndex": 0,
                                    "display": "If",
                                    "logic": "and",
                                    "type": "if"
                                }
                            ],
                            "enabled": true,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 30,
                            "exitConditionEnabled": true,
                            "exitLoopAfter": 15,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "job_id": "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.data.*.JobID",
                            "timeout": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "job_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "action",
                    "userCode": "\n    # Write your custom code here...\n    #parameters = []\n    #for job_ids in file_jobid_detonation_output__jobid:\n    #    for job in job_ids:\n    #        if job is not None:\n    #            parameters.append({\n    #                \"job_id\": job,\n    #                \"timeout\": 5,\n    #            })\n    #phantom.debug(parameters)\n",
                    "warnings": {},
                    "x": 180,
                    "y": 500
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "normalized file summary output",
                            "customNameId": 0,
                            "description": "This block uses custom code for normalizing score. Adjust the logic as desired in the documented sections.",
                            "join": [],
                            "note": "This block uses custom code for normalizing score. Adjust the logic as desired in the documented sections."
                        },
                        "functionId": 5,
                        "functionName": "normalized_file_summary_output",
                        "id": "17",
                        "inputParameters": [
                            "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.parameter.file",
                            "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.data.*.JobID",
                            "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.parameter.job_id",
                            "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Submission.Name",
                            "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.summary.Score",
                            "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Resources",
                            "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Verdict",
                            "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Tasks"
                        ],
                        "outputVariables": [
                            "file_score_object",
                            "scores",
                            "categories",
                            "score_id",
                            "file",
                            "job_id",
                            "classifications",
                            "file_name"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "code",
                    "userCode": "    \n    \n    score_table = {\n        \"0\":\"Unknown\",\n        \"1\":\"Very_Safe\",\n        \"2\":\"Safe\",\n        \"3\":\"Probably_Safe\",\n        \"4\":\"Leans_Safe\",\n        \"5\":\"May_not_be_Safe\",\n        \"6\":\"Exercise_Caution\",\n        \"7\":\"Suspicious_or_Risky\",\n        \"8\":\"Possibly_Malicious\",\n        \"9\":\"Probably_Malicious\",\n        \"10\":\"Malicious\"\n    }\n\n    classification_ids = {\n        \"Unknown\": 0,\n        \"Adware\": 1,\n        \"Backdoor\": 2,\n        \"Bot\": 3,\n        \"Bootkit\": 4,\n        \"DDOS\": 5,\n        \"Downloader\": 6,\n        \"Dropper\": 7,\n        \"Exploit-Kit\": 8,\n        \"Keylogger\": 9,\n        \"Ransomware\": 10,\n        \"Remote-Access-Trojan\": 11,\n        \"Resource-Exploitation\": 13,\n        \"Rogue-Security-Software\": 14,\n        \"Rootkit\": 15,\n        \"Screen-Capture\": 16,\n        \"Spyware\": 17,\n        \"Trojan\": 18,\n        \"Virus\": 19,\n        \"Webshell\": 20,\n        \"Wiper\": 21,\n        \"Worm\": 22,\n        \"Other\": 99\n    }\n\n    normalized_file_summary_output__file_score_object = []\n    normalized_file_summary_output__scores = []\n    normalized_file_summary_output__categories = []\n    normalized_file_summary_output__score_id = []\n    normalized_file_summary_output__file = []\n    normalized_file_summary_output__job_id = []\n    normalized_file_summary_output__classifications = []\n    normalized_file_summary_output__file_name = []\n    \n    \n    def find_sha1_details(target_id, task_list):\n        '''\n        Attempt to find the detail object with a sha1\n        '''\n        for task in task_list:\n            if (target_id == task.get('ResourceID')\n                and task.get('Results',{}).get('Details', {}).get('sha1')):\n                task_result_details = task['Results']['Details']\n                task_result_details.pop('RootTaskID', None)\n                return task_result_details\n        return None\n\n        \n    ## pair forensic job results with url detonated\n    job_file_dict = {}\n    for orig_file, orig_job, filtered_job in zip(filtered_result_0_parameter_file, filtered_result_0_data___jobid, filtered_result_1_parameter_job_id):\n        if orig_job == filtered_job:\n            job_file_dict[filtered_job] = orig_file\n    \n    for job, file_name, score_num, resources, verdict, tasks in zip(\n        filtered_result_1_parameter_job_id, \n        filtered_result_1_data___submission_name, \n        filtered_result_1_summary_score, \n        filtered_result_1_data___resources, \n        filtered_result_1_data___verdict,\n        filtered_result_1_data___tasks\n    ):\n        \n        ## translate scores\n        score_id = int(score_num/10) if score_num > 0 else 0\n        score = score_table[str(score_id)]\n        file = job_file_dict[job]\n        attributes = {}\n        \n        ## build.a sub dictionary of high priority related observables\n        related_observables = []\n        for sub_observ in resources:\n            if sub_observ['Name'] != file_name:\n                        \n                details = find_sha1_details(sub_observ['ID'], tasks)\n                second_num = sub_observ['DisplayScore']\n                second_num_id = int(second_num/10) if second_num > 0 else 0\n                sub_observ_dict = {\n                    'value': sub_observ['Name'],\n                    'type': sub_observ['Type'].lower(),\n                    'reputation': {\n                        'score': score_table[str(second_num_id)],\n                        'orig_score': second_num,\n                        'score_id': second_num_id\n                    },\n                    'source': 'Splunk Attack Analyzer'\n                }\n                if details:\n                    details['name'] = sub_observ['Name']\n                    details.pop('exiftool', None)\n                    sub_observ_dict['attributes'] = details\n                # check if observ is already in related_observables\n                skip_observ = False\n                for idx, item in enumerate(related_observables):\n                    if (sub_observ.get('FileMetadata', {}).get('SHA256', 'null_one') \n                        == item.get('attributes', {}).get('sha256', 'null_two')\n                        and sub_observ['DisplayScore'] > item['reputation']['orig_score']):\n                        related_observables[idx] = sub_observ_dict\n                        skip_observ = True\n                    elif sub_observ['Name'] == item['value']:\n                        skip_observ = True\n                if not skip_observ:\n                    related_observables.append(sub_observ_dict)\n            elif sub_observ['Name'] == file_name:\n                details = find_sha1_details(sub_observ['ID'], tasks)\n                if details:\n                    details.pop('exiftool', None)\n                    details['name'] = file_name\n                    attributes = details\n                else:\n                    file_metadata = sub_observ.get('FileMetadata', {})\n                    attributes = {\n                        'name': file_name,\n                        'sha256': file_metadata.get('SHA256'),\n                        'md5': file_metadata.get('MD5'),\n                        'size': file_metadata.get('Size')\n                    }\n                    if file_metadata.get('MimeType'):\n                        attributes['mime_type'] = file_metadata['MimeType']\n        \n        normalized_file_summary_output__file_score_object.append({\n            'value': file, \n            'orig_score': score_num, \n            'score': score, \n            'score_id': score_id, \n            'classifications': [verdict if verdict else \"Unknown\"],\n            'classification_ids': [classification_ids.get(verdict, 99) if verdict else 0],\n            'related_observables': related_observables,\n            'attributes': attributes\n                \n        })\n        normalized_file_summary_output__scores.append(score)\n        normalized_file_summary_output__score_id.append(score_id)\n        normalized_file_summary_output__file.append(file)\n        normalized_file_summary_output__file_name.append(file_name)\n        normalized_file_summary_output__job_id.append(job)\n        normalized_file_summary_output__classifications.append([verdict if verdict else \"Unknown\"])\n    \n    \n",
                    "warnings": {},
                    "x": -60,
                    "y": 1260
                },
                "18": {
                    "data": {
                        "advanced": {
                            "customName": "format file report ",
                            "customNameId": 0,
                            "description": "Format a summary table with the information gathered from the playbook.",
                            "drop_none": true,
                            "join": [],
                            "note": "Format a summary table with the information gathered from the playbook."
                        },
                        "functionId": 2,
                        "functionName": "format_file_report",
                        "id": "18",
                        "parameters": [
                            "normalized_file_summary_output:custom_function:file_name",
                            "normalized_file_summary_output:custom_function:scores",
                            "normalized_file_summary_output:custom_function:score_id",
                            "normalized_file_summary_output:custom_function:classifications",
                            "normalized_file_summary_output:custom_function:job_id",
                            "file_screenshot_formatting:custom_function:report",
                            "get_file_summary_output:action_result.summary.AppURL"
                        ],
                        "template": "SOAR analyzed File(s) using Splunk Attack Analyzer.  The table below shows a summary of the information gathered.\n\n| File Name | Normalized Score | Score Id  | Classifications | Report Link | Source |\n| --- | --- | --- | --- | --- | --- |\n%%\n| `{0}` | {1} | {2} | {3} | {6} | Splunk Attack Analyzer (SAA) |\n%%\n\nScreenshots associated with the detonated Files are shown below (if available):\n\n{5}\n\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "format",
                    "userCode": "\n    # Write your custom code here...\n    #phantom.debug(phantom.format(container=container, template=template, parameters=parameters, name=\"format_report_file\"))\n",
                    "warnings": {},
                    "x": 180,
                    "y": 1540
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "build file output",
                            "customNameId": 0,
                            "description": "This block uses custom code to generate an observable dictionary to output into the observables data path.",
                            "join": [],
                            "note": "This block uses custom code to generate an observable dictionary to output into the observables data path."
                        },
                        "functionId": 6,
                        "functionName": "build_file_output",
                        "id": "19",
                        "inputParameters": [
                            "normalized_file_summary_output:custom_function:file",
                            "normalized_file_summary_output:custom_function:job_id",
                            "normalized_file_summary_output:custom_function:file_score_object",
                            "get_file_summary_output:action_result.summary.AppURL"
                        ],
                        "outputVariables": [
                            "observable_array"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    build_file_output__observable_array = []\n    for _vault_id, external_id, file_object, app_url in zip(normalized_file_summary_output__file, normalized_file_summary_output__job_id, normalized_file_summary_output__file_score_object, get_file_summary_output_summary_appurl):\n        #phantom.debug(\"vault: {} id: {}\".format(_vault_id, external_id))\n        observable_object = {\n            \"value\": _vault_id,\n            \"type\": \"hash\",\n            \"attributes\": file_object['attributes'],\n            \"reputation\": {\n                \"orig_score\": file_object['orig_score'],\n                \"score\": file_object['score'],\n                \"score_id\": file_object['score_id']\n            },\n            \"malware\": {\n                \"classifications\": file_object['classifications'],\n                \"classification_ids\": file_object['classification_ids']\n            },\n            \"source\": \"Splunk Attack Analyzer\",\n            \"source_link\":f\"{app_url}\"\n        }\n        if file_object.get('related_observables'):\n            observable_object[\"related_observables\"] = file_object['related_observables']\n            \n        build_file_output__observable_array.append(observable_object)\n    \n",
                    "warnings": {},
                    "x": 180,
                    "y": 1960
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "saa input filter",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "description": "Determine branches based on provided inputs.",
                            "join": [],
                            "note": "Determine branches based on provided inputs."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:vault_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "saa_vault_id_input",
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "saa_input_filter",
                        "id": "2",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "filter",
                    "warnings": {},
                    "x": 240,
                    "y": 20
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "file summary filter",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "description": "Filters successful file detonation job forensic results.",
                            "join": [],
                            "note": "Filters successful file detonation job forensic results."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_file_summary_output:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "get_job_file_summary_sucess",
                                "logic": "and"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "file_summary_filter",
                        "id": "23",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "filter",
                    "warnings": {},
                    "x": 240,
                    "y": 840
                },
                "25": {
                    "data": {
                        "action": "get job screenshots",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "get file job screenshots",
                            "customNameId": 0,
                            "description": "Add the job screenshots to the vault",
                            "join": [],
                            "note": "Add the job screenshots to the vault"
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "saa_uob_poc"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "get_file_job_screenshots",
                        "id": "25",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "job_id": "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.parameter.job_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "job_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "action",
                    "warnings": {},
                    "x": 180,
                    "y": 1020
                },
                "27": {
                    "data": {
                        "advanced": {
                            "customName": "file screenshot formatting",
                            "customNameId": 0,
                            "description": "Custom formatting for the markdown report that shows screenshots grouped by detonated file.",
                            "join": [],
                            "note": "Custom formatting for the markdown report that shows screenshots grouped by detonated file"
                        },
                        "functionId": 4,
                        "functionName": "file_screenshot_formatting",
                        "id": "27",
                        "inputParameters": [
                            "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.parameter.file",
                            "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.data.*.JobID",
                            "get_file_job_screenshots:action_result.parameter.job_id",
                            "get_file_job_screenshots:action_result.data.*.file_name",
                            "get_file_job_screenshots:action_result.data.*.id"
                        ],
                        "outputVariables": [
                            "report"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "code",
                    "userCode": "\n    file_screenshot_formatting__report = \"\"\n    \n    for file, job_id in zip(filtered_result_0_parameter_file, filtered_result_0_data___jobid):\n        file_screenshot_formatting__report += f\"#### {file}\\n\"\n        for screenshot_job, screenshot_name, screenshot_id in zip(get_file_job_screenshots_parameter_job_id, get_file_job_screenshots_result_item_1, get_file_job_screenshots_result_item_2):\n            if job_id == screenshot_job:\n                file_screenshot_formatting__report += f\"![{screenshot_name}](/view?id={screenshot_id})\\n\"\n\n",
                    "warnings": {},
                    "x": 420,
                    "y": 1260
                },
                "28": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "debug",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "debug_1",
                        "id": "28",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "debug": {
                                "description": "Print debug messages with the type and value of 0-10 different inputs. This is useful for checking the values of input data or the outputs of other playbook blocks.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_1",
                                        "name": "input_1",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_2",
                                        "name": "input_2",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_3",
                                        "name": "input_3",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_4",
                                        "name": "input_4",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_5",
                                        "name": "input_5",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_6",
                                        "name": "input_6",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_7",
                                        "name": "input_7",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_8",
                                        "name": "input_8",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_9",
                                        "name": "input_9",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_10",
                                        "name": "input_10",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "debug",
                                "name": "debug"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "debug": {
                                "input_1": [
                                    "get_file_summary_output:action_result.data.*.Tasks.*.Results.Details.Headers"
                                ],
                                "input_10": null,
                                "input_2": null,
                                "input_3": null,
                                "input_4": null,
                                "input_5": null,
                                "input_6": null,
                                "input_7": null,
                                "input_8": null,
                                "input_9": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "28",
                    "type": "utility",
                    "warnings": {
                        "config": [
                            "Reconfigure invalid datapath."
                        ],
                        "context": [
                            "Connect block to playbook flow."
                        ]
                    },
                    "x": 900,
                    "y": 1200
                },
                "29": {
                    "data": {
                        "action": "get job forensics",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
                        "connectorConfigs": [
                            "saa_uob_poc"
                        ],
                        "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_job_forensics_1",
                        "id": "29",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "job_id": "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.data.*.JobID"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "job_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "action",
                    "warnings": {},
                    "x": 180,
                    "y": 644.5
                },
                "30": {
                    "data": {
                        "advanced": {
                            "customName": "format whois note",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 7,
                        "functionName": "format_whois_note",
                        "id": "30",
                        "inputParameters": [
                            "get_job_forensics_1:action_result.data.*.WhoisResults"
                        ],
                        "outputVariables": [
                            "whois_format_note"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    import json\n    \n    #phantom.debug(get_job_forensics_1_result_item_0)\n    whois_data_json = get_job_forensics_1_result_item_0[0][0]\n    phantom.debug(whois_data_json)\n    phantom.debug(whois_data_json['Emails'])\n    note = (\n        \"| Key | Value |\\n\"\n        \"| :--- | :--- |\\n\"\n    )\n\n    note += \"|{}|{}|\\n\".format(\"DomainName\", whois_data_json['DomainName'])\n    note += \"|{}|{}|\\n\".format(\"Org\", whois_data_json['Org'])\n    note += \"|{}|{}|\\n\".format(\"City\", whois_data_json['City'])\n    note += \"|{}|{}|\\n\".format(\"Name\", whois_data_json['Name'])\n    note += \"|{}|{}|\\n\".format(\"State\", whois_data_json['State'])\n    note += \"|{}|{}|\\n\".format(\"DNSSec\", whois_data_json['DNSSec'])\n    note += \"|{}|{}|\\n\".format(\"Emails\", whois_data_json['Emails'])\n    note += \"|{}|{}|\\n\".format(\"Address\", whois_data_json['Address'])\n    note += \"|{}|{}|\\n\".format(\"Country\", whois_data_json['Country'])\n    note += \"|{}|{}|\\n\".format(\"Engines\", whois_data_json['Engines'])\n    note += \"|{}|{}|\\n\".format(\"ZipCode\", whois_data_json['ZipCode'])\n    note += \"|{}|{}|\\n\".format(\"CreatedAt\", whois_data_json['CreatedAt'])\n    note += \"|{}|{}|\\n\".format(\"ExpiresAt\", whois_data_json['ExpiresAt'])\n    note += \"|{}|{}|\\n\".format(\"Registrar\", whois_data_json['Registrar'])\n    note += \"|{}|{}|\\n\".format(\"UpdatedAt\", whois_data_json['UpdatedAt'])\n    note += \"|{}|{}|\\n\".format(\"NameServers\", whois_data_json['NameServers'])\n    note += \"|{}|{}|\\n\".format(\"WhoisServer\", whois_data_json['WhoisServer'])\n\n    \n    format_whois_note__whois_format_note = note\n\n",
                    "warnings": {},
                    "x": 180,
                    "y": 740
                },
                "31": {
                    "data": {
                        "advanced": {
                            "customName": "format file report no screenshot",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "format_file_report_no_screenshot",
                        "id": "31",
                        "parameters": [
                            "normalized_file_summary_output:custom_function:file_name",
                            "normalized_file_summary_output:custom_function:scores",
                            "normalized_file_summary_output:custom_function:score_id",
                            "normalized_file_summary_output:custom_function:classifications",
                            "get_file_summary_output:action_result.summary.AppURL"
                        ],
                        "template": "SOAR analyzed File(s) using Splunk Attack Analyzer.  The table below shows a summary of the information gathered.\n\n| File Name | Normalized Score | Score Id  | Classifications | Report Link | Source |\n| --- | --- | --- | --- | --- | --- |\n%%\n| `{0}` | {1} | {2} | {3} | {4} | Splunk Attack Analyzer (SAA) |\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "31",
                    "type": "format",
                    "warnings": {},
                    "x": 180,
                    "y": 1720
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "detonation status filter",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "description": "Filters successful file  detonation results.",
                            "join": [],
                            "note": "Filters successful file detonation results."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "file_detonation:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "saa_file_success_status",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "detonation_status_filter",
                        "id": "4",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "filter",
                    "warnings": {},
                    "x": 240,
                    "y": 340
                }
            },
            "notes": "Inputs: url,  vault_id\nInteractions: Splunk Attack Analyzer\nActions: url detonation, , file detonation\nOutputs: report, observables",
            "origin": {
                "playbook_id": 747,
                "playbook_name": "UOB Use case #1 - SAA_Dynamic_Email_Analysis Subplaybook",
                "playbook_repo_id": 2,
                "playbook_repo_name": "local"
            }
        },
        "input_spec": [
            {
                "contains": [
                    "vault id"
                ],
                "description": "A vault_id provided for reputation analysis - Splunk Attack Analyzer",
                "name": "vault_id"
            }
        ],
        "output_spec": [
            {
                "contains": [],
                "datapaths": [
                    "build_url_output:custom_function:observable_array",
                    "build_file_output:custom_function:observable_array"
                ],
                "deduplicate": false,
                "description": "An array of observable dictionaries with value, type, score, score_id, and categories.",
                "metadata": {},
                "name": "observable"
            },
            {
                "contains": [],
                "datapaths": [
                    "format_url_report:formatted_data",
                    "format_file_report:formatted_data"
                ],
                "deduplicate": false,
                "description": "a report contains value, score, confidence and categories",
                "metadata": {},
                "name": "report"
            },
            {
                "contains": [],
                "datapaths": [
                    "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Verdict"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "Verdict"
            },
            {
                "contains": [],
                "datapaths": [
                    "format_whois_note:custom_function:whois_format_note"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "whois_note"
            },
            {
                "contains": [],
                "datapaths": [
                    "format_file_report_no_screenshot:formatted_data"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "analysis_summary_only"
            }
        ],
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.1.305"
    },
    "create_time": "2024-04-23T23:58:37.092891+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": [
        "url",
        "ip",
        "domain",
        "sandbox",
        "D3-DA",
        "vault_id",
        "splunk_attack_analyzer"
    ]
}